set nocompatible               " be iMproved
filetype off                   " required!

" Call in Pathogen
call pathogen#infect()
call pathogen#helptags()


let g:ft_ignore_pat = '\.org'

filetype plugin indent on

set nowrap        " don't wrap lines
set tabstop=4     " a tab is two spaces
set backspace=indent,eol,start
                  " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
set shiftwidth=4  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

let mapleader=","

" Colour columns 80 onward:
execute "set colorcolumn=" . join(range(81,335), ',')


"show whitespace
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

let g:Powerline_symbols = 'fancy'

"toggl ending of tabs for various file types
au BufRead,BufNewFile *.py set expandtab

"paste on F9
set pastetoggle=<F9>

set t_Co=256


syntax on

set background=dark
colorscheme solarized

" Reselect text after indent/oudent
vnoremap < <gv
vnoremap > >gv

" Snipmate use a local directory as well:

" work with snipmate
let g:SuperTabDefaultCompletionType = "context"



" Sntastic Syntax Checker.
let g:syntastic_python_checkers = [ 'flake8', 'pep8', 'pyflakes' ]


" Python Settings
au FileType python setl sw=4 sts=4 et

" Email Settings
au FileType mail set tw=72 spell spelllang=en_gb

" Enable Tagbar
nnoremap <silent> <Leader>b :TagbarToggle<CR>

" Ctrlp shortcut:
nnoremap <leader>. :CtrlPTag<cr>

" Notes Plugin
let g:notes_directories = ['~/Dropbox/notes']
" Lets go with utf-8 - seems to be needed for Notes plugin on Widow s
let g:notes_suffix = '.txt'


let g:pad#dir = "~/Dropbox/pad-notes/"


au! BufRead,BufWrite,BufWritePost,BufNewFile *.org
au BufEnter *.org call org#SetOrgFileType()

let g:org_command_for_emacsclient = "C:\\Users\\chflemin.KEYSIGHT\\Documents\\emacs-24.3\\bin\\runemacs"

let g:org_capture_file = '~/Dropbox/notes/mycaptures.org'
command! OrgCapture :call org#CaptureBuffer()
command! OrgCaptureFile :call org#OpenCaptureFile()


" The variables below are used to define the default Todo list and
" default Tag list. Both of these can also be defined
" on a document-specific basis by config lines in a file.
" See :h vimorg-todo-metadata and/or :h vimorg-tag-metadata
" 'TODO | DONE' is the default, so not really necessary to define it at all
let g:org_todo_setup='TODO | INPROGRESS | DONE'

" OR, e.g.,:
"let g:org_todo_setup='TODO NEXT STARTED | DONE CANCELED'
" include a tags setup string if you want:
let g:org_tags_alist='{@home(h) @work(w) @kings(t)} {easy(e) hard(d)} {computer(c) phone(p)}'


" g:org_agenda_dirs specify directories that, along with
" their subtrees, are searched for list of .org files when
" accessing EditAgendaFiles(). Specify your own here, otherwise
" default will be for g:org_agenda_dirs to hold single
" directory which is directory of the first .org file opened
" in current Vim instance:
" Below is line I use in my Windows install:
" NOTE: case sensitive even on windows.
let g:org_agenda_select_dirs=["~/Dropbox/notes"]
let g:org_agenda_files = split(glob("~/Dropbox/notes/org-mod*.org"),"\n")


"PAD notetaking
"

let g:pad#dir = '~/Dropbox/notes/pad/'



"----------------------
" Custom Agenda Searches
" ----------------------
" The assignment to g:org_custom_searches below defines searches that a
" a user can then easily access from the Org menu or the Agenda Dashboard.
" (Still need to add help on how to define them, assignment below
" is hopefully illustrative for now. . . . )
let g:org_custom_searches = [
             \ { 'name':"Next week's agenda", 'type':'agenda',
             \ 'agenda_date':'+1w', 'agenda_duration':'w' }
             \, { 'name':"Next week's TODOS", 'type':'agenda',
             \ 'agenda_date':'+1w', 'agenda_duration':'w',
             \ 'spec':'+UNFINISHED_TODOS' }
             \, { 'name':'Home tags', 'type':'heading_list', 'spec':'+HOME' }
             \, { 'name':'Home tags', 'type':'sparse_tree', 'spec':'+HOME' }
             \ ]



if has("multi_byte")  
         set encoding=utf-8
         set fileencodings=ucs-bom
""         set guifont=DejaVu_Sans_Mono:h11:b:cANSI
endif

if filereadable(glob("~/.simplenoterc"))
	source ~/.simplenoterc
endif


